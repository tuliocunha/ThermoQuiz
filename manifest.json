// manifest.json
{
  "manifest_version": 3,
  "name": "HVAC Quiz Platform",
  "version": "1.0",
  "description": "Interactive quiz platform for HVAC topics",
  "permissions": [
    "storage",
    "unlimitedStorage"
  ],
  "action": {
    "default_popup": "html/login.html"
  },
  "icons": {
    "16": "assets/images/icon16.png",
    "48": "assets/images/icon48.png",
    "128": "assets/images/icon128.png"
  },
  "background": {
    "service_worker": "js/background.js"
  }
}

// js/indexedDB.js
class DatabaseManager {
  constructor() {
    this.dbName = 'HVACQuizDB';
    this.dbVersion = 1;
  }

  async initDB() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.dbVersion);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => resolve(request.result);

      request.onupgradeneeded = (event) => {
        const db = event.target.result;

        // Questions store
        if (!db.objectStoreNames.contains('questions')) {
          const questionsStore = db.createObjectStore('questions', { keyPath: 'id', autoIncrement: true });
          questionsStore.createIndex('unit', 'unit', { unique: false });
          questionsStore.createIndex('topic', 'topic', { unique: false });
          questionsStore.createIndex('level_of_difficulty', 'level_of_difficulty', { unique: false });
          questionsStore.createIndex('tags', 'tags', { unique: false, multiEntry: true });
        }

        // Users store
        if (!db.objectStoreNames.contains('users')) {
          const usersStore = db.createObjectStore('users', { keyPath: 'id', autoIncrement: true });
          usersStore.createIndex('email', 'email', { unique: true });
          usersStore.createIndex('nickname', 'nickname', { unique: true });
        }

        // Scores store
        if (!db.objectStoreNames.contains('scores')) {
          const scoresStore = db.createObjectStore('scores', { keyPath: 'id', autoIncrement: true });
          scoresStore.createIndex('user_id', 'user_id', { unique: false });
          scoresStore.createIndex('date_played', 'date_played', { unique: false });
        }

        // Badges store
        if (!db.objectStoreNames.contains('badges')) {
          const badgesStore = db.createObjectStore('badges', { keyPath: 'id', autoIncrement: true });
          badgesStore.createIndex('name', 'name', { unique: true });
        }
      };
    });
  }

  async addUser(userData) {
    const db = await this.initDB();
    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['users'], 'readwrite');
      const store = transaction.objectStore('users');
      const request = store.add(userData);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  async getUser(email) {
    const db = await this.initDB();
    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['users'], 'readonly');
      const store = transaction.objectStore('users');
      const index = store.index('email');
      const request = index.get(email);

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  // Add more methods for CRUD operations on other stores
}

export const dbManager = new DatabaseManager();
